# Define Jobs of CI/CD Pipe
# Workflow is a configurable automated process, defined in .github/workflows directory. GitHub will detect the pipeline code of the workflow and run the defined jobs.

# Create a CI Pipeline (GitHub Actions)
name: CI

on: [push] # alternative way down below | This way all branches are wathced, you can specify other trigger events inside the bracket: [push, ...]
# on: -> defines what action will trigger the pipeline
#   push: -> triggers pipeline when a push is made to any branch in the repository (if no spec. branch declared)
#     branches: -> specify tracked branches
#     - main

jobs:
  sast_scan:
    # name the first step of this job
    name: Run Bandit Scan
    # define what machine this step runs on/job is executed on
    runs-on: ubuntu-latest # ubuntu runtime this case, fresh new environment so everything has to be setted up, hosted machine by GitHub

    # define the steps of the job
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # official GitHub Action, all workflow under actions/ is official created by GitHub Actions

    - name: Set up Python # Pylint needs a python runtime
      uses: actions/setup-python@v5 # VERSION NUMBERS ARE MUST BE DECLARED
      with:
        python-version: 3.8

    - name: Install Bandit
      run: pip install bandit # execute command on the machine, pip is Python package manager, already installed and available due to the prev. step

    - name: Run Bandit Scan
      run: bandit -r -ll -ii . -f json -o bandit-report.json # scans everything in the current folder recursively
      # configure Bandit to correctly identify vulnerabilities based on severity level and confidence level -> low confidence can result 'false positive' error
      # -l => report level of severity or higher      -i => report issues of a given confidence level or higher  (l-low, ll-medium, ...and so on) END RESULT WILL STAY THE SAME BUT THE LOGS NOW CORRECT TO THE DEMANDED STATES
      # -o OUTPUT_FILE -f FORMAT

    - name: Upload Artifact # create this step to save the produced report file/aritfact, so when the job is done GitHub wont just clear the machine out where it executed, but takes this artifact and uploads it to a persistent space, so later it can be reached after the pipeline finished
    # Allows us to share data between jobs and store data once a workflow is complete
      # GitHub Actions steps, if any of them fails and exited with an error, all the other in the chain/order (below steps) will be skipped
      if: always() # forces the workflow to continue always
      uses: actions/upload-artifact@v4
      with:
        name: bandit-findings # provide a name for this artifact for later reference
        path: bandit-report.json # which artifact to export

  # Implement new job for building and scanning docker image, it will be created and stored on the job execution host machine, wont be uploaded to a image registry so we dont have to pull it anywhere, and can be scanned right away
  # common practice to divide these processes into separate steps like building the image, scanning and then push the image, but can be one job to keep simple the code
  image_scan:
    name: Build Image and Run Image Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code # checkout the repo for the latest state of the project/code base
      uses: actions/checkout@v4
    
    - name: Set up Docker # searched for a workflow, copied out the uses: line, this step will install and set up docker
      uses: docker-practice/actions-setup-docker@v1
      with:
        docker_version: '27.4'

    - name: Build Docker Image # build and tag the image out of Dockerfile, build context is the current directory where the application code is
      run: docker build -f Dockerfile -t myapp:latest .

    - name: Docker Scout Scan # download and install Docker Scout then run a quick scan and overview of the image, base image refresh and update recommendations and a more in-depth complete scan (cves) which analyzes software artifact for vulnerabilities and displays CVEs identified in a software artifact (this case our newly created Docker Image)
      run: | # with '|' character multiple line command can be declared and executed
        curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
        sh install-scout.sh
        docker scout quickview
        docker scout cves

